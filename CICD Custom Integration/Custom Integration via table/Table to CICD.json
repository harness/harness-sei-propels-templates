{
    "id": "fbf85243-50b2-4d4f-a293-19c22e9b37d1",
    "permanent_id": "a48f45dc-b361-4072-ad2f-1e71efe6b9cd",
    "name": "Table to CICD",
    "description": "",
    "trigger_type": "scheduled",
    "trigger_template_type": "scheduled",
    "enabled": true,
    "nodes_dirty": true,
    "ui_data": {
        "nodes": {
            "0": {
                "id": "0",
                "type": "trigger",
                "description": "Scheduled - Trigger for playbooks to run on a specific schedule.",
                "ports": {
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "cron": {
                        "key": "cron",
                        "type": "text",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "validation": "",
                        "options": [],
                        "default_value": "",
                        "display_name": "Schedule",
                        "description": "Specify a schedule using the UNIX cron format to trigger the playbook (the playbook won't run until the cron triggers for the first time).",
                        "index": 0
                    },
                    "interval_in_min": {
                        "key": "interval_in_min",
                        "type": "text",
                        "values": [
                            {
                                "value": "-1",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "validation": "",
                        "options": [],
                        "default_value": "",
                        "display_name": "Interval in minutes",
                        "description": "If Schedule is not specified, choose an interval in minutes to trigger the playbook periodically, starting immediately. Use -1 as a special value to trigger the playbook only once. It will trigger again every time the playbook is updated.",
                        "index": 0
                    }
                },
                "output": {
                    "cron": {
                        "key": "cron",
                        "display_name": "Schedule",
                        "type": "text",
                        "description": "Specify a schedule using the UNIX cron format to trigger the playbook (the playbook won't run until the cron triggers for the first time).",
                        "options": [],
                        "required": false,
                        "hidden": false,
                        "validation": "",
                        "default_value": ""
                    },
                    "interval_in_min": {
                        "key": "interval_in_min",
                        "display_name": "Interval in minutes",
                        "type": "text",
                        "description": "If Schedule is not specified, choose an interval in minutes to trigger the playbook periodically, starting immediately. Use -1 as a special value to trigger the playbook only once. It will trigger again every time the playbook is updated.",
                        "options": [],
                        "required": false,
                        "hidden": false,
                        "validation": "",
                        "default_value": ""
                    }
                },
                "options": [],
                "position": {
                    "x": 300,
                    "y": 50
                },
                "properties": {
                    "icon": "clock-circle"
                },
                "name": "Scheduled",
                "trigger_type": {
                    "label": "manual",
                    "key": "manual"
                },
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "1": {
                "id": "1",
                "type": "query_config_table",
                "description": "Query a LevelOps Table.",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "filtering_mode": {
                        "key": "filtering_mode",
                        "type": "radio-group",
                        "values": [
                            {
                                "value": "Exact match",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [
                            "Exact match",
                            "Contains",
                            "Starts with"
                        ],
                        "default_value": "Exact match",
                        "display_name": "Filtering mode",
                        "description": "Select how the filters should be evaluated. This applies to all the filters at once.",
                        "index": 40
                    },
                    "config_table": {
                        "key": "config_table",
                        "type": "single-dynamic-select",
                        "values": [],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "dynamic_resource_name": "config_tables",
                        "display_name": "Table",
                        "description": "",
                        "index": 10
                    },
                    "output_mode": {
                        "key": "output_mode",
                        "type": "radio-group",
                        "values": [
                            {
                                "value": "Iterate",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [
                            "Return Single Row",
                            "Iterate"
                        ],
                        "default_value": "Return Single Row",
                        "display_name": "Output mode",
                        "description": "When returning a single row, only the first match will be returned. When iterating, the rest of the playbook is executed in a loop for each row that matched the filters.",
                        "index": 30
                    },
                    "config_table_filter": {
                        "key": "config_table_filter",
                        "type": "config-table-filter",
                        "values": [],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Filters",
                        "description": "Specify one or more filters by selecting a column and what value it should contain. The behavior of the filters depends on the filtering mode below.",
                        "index": 20,
                        "use_input_fields": {
                            "table_id": "config_table"
                        }
                    }
                },
                "output": {
                    "config_row": {
                        "key": "config_row",
                        "display_name": "config_row",
                        "value_type": "json_blob",
                        "hidden": false,
                        "content_type_from_input_config_table": "config_table_filter",
                        "content_schema": {},
                        "content_type": "json_blob"
                    }
                },
                "options": [
                    "Found",
                    "Not found"
                ],
                "position": {
                    "x": 302,
                    "y": 189
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Query Table",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "2": {
                "id": "2",
                "type": "script",
                "description": "Custom logic using JavaScript",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "parameters": {
                        "key": "parameters",
                        "type": "kv",
                        "values": [
                            {
                                "value": {
                                    "key": "row",
                                    "value": "${1.config_row}"
                                },
                                "type": "json"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Input Parameters",
                        "description": "Specify input parameters that will be available within the script.",
                        "index": 10
                    },
                    "script": {
                        "key": "script",
                        "type": "text-editor",
                        "values": [
                            {
                                "value": "prefix = 'hello ';\nfunction replaceAll(str, find, replace) {\n  return str.replace(new RegExp(find, 'g'), replace);\n}\n\nfunction handleNode(context) {\n  const row = JSON.parse(context.getParam('row'));\n  const job_full_name = row.environment + \"/\" + row.service_name ;\n  const payload = {\n    job_name: row.service_name,\n    user_id: \"SCMTrigger\",\n    job_run_params: [\n      {\n        type: \"StringParameterValue\",\n        name: \"version\",\n        value: row.version\n      },\n      {\n        type: \"StringParameterValue\",\n        name: \"revision\",\n        value: row.revision\n      }\n    ],\n    repo_url: null,\n    start_time: parseInt(row.timestamp),\n    result: \"SUCCESS\",\n    duration: 100,\n    build_number: parseInt(row.deployment) || 1234,\n    jenkins_instance_guid: \"09058b71-ddb3-4cc6-8aba-67188a650607\",\n    jenkins_instance_name: \"Jenkins Instance\",\n    jenkins_instance_url: \"https://jenkins.dev.levelops.io/\",\n    job_run: null,\n    job_full_name: job_full_name,\n    job_normalized_full_name: job_full_name,\n    branch_name: null,\n    module_name: null,\n    scm_commit_ids: [],\n    trigger_chain: [{\n      id: \"SCMTrigger\",\n      type: \"SCMTriggerCause\"\n    }]\n  };\n  var strp = JSON.stringify(payload).replace(/\"/g, '\\\\\"')\n  // levelops.serviceName().doSomething() - invoke a levelops service\n  return { \n    state : 'success',\n    output : { \n      'cicd' : {\n        request_type: \"JenkinsPluginJobRunComplete\",\n        payload: JSON.stringify(payload)\n      }\n    } \n  };\n}",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "default_value": "prefix = 'hello ';\nfunction handleNode(context) {\n  name = context.getParam('name');\n  // levelops.serviceName().doSomething() - invoke a levelops service\n  return { \n    state : 'success',\n    output : { \n      'message' : prefix + name  \n    } \n  };\n}",
                        "display_name": "Script",
                        "description": "Write some custom logic using JavaScript.",
                        "index": 20
                    }
                },
                "output": {},
                "options": [],
                "position": {
                    "x": 304,
                    "y": 338
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Transform",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "3": {
                "id": "3",
                "type": "levelops_query",
                "description": "Make a call to a Levelops Query",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "ignore_errors": {
                        "key": "ignore_errors",
                        "type": "radio-group",
                        "values": [
                            {
                                "value": "No",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [
                            "Yes",
                            "No"
                        ],
                        "default_value": "Yes",
                        "display_name": "Ignore errors",
                        "description": "If Yes, this node will succeed regardless of the API response",
                        "index": 80
                    },
                    "headers": {
                        "key": "headers",
                        "type": "kv",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Headers",
                        "index": 30
                    },
                    "path": {
                        "key": "path",
                        "type": "text",
                        "values": [
                            {
                                "value": "v1/generic-requests",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Path",
                        "description": "Path appended to the base URL",
                        "index": 20
                    },
                    "password": {
                        "key": "password",
                        "type": "password_string",
                        "values": [],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Api Key",
                        "description": "Api key for Authentication to reach Levelops Query.",
                        "index": 70
                    },
                    "integration_id": {
                        "key": "integration_id",
                        "type": "single-dynamic-select",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "dynamic_resource_name": "integrations",
                        "display_name": "Satellite Integration",
                        "description": "Pick a satellite integration to make the call from. If not specified, LevelOps will only be able to reach public APIs.",
                        "index": 60
                    },
                    "content_type": {
                        "key": "content_type",
                        "type": "text",
                        "values": [
                            {
                                "value": "application/json",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Content Type",
                        "description": "Content type of the body (for example: \"application/json\")",
                        "index": 40
                    },
                    "method": {
                        "key": "method",
                        "type": "single-select",
                        "values": [
                            {
                                "value": "POST",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE"
                        ],
                        "default_value": "GET",
                        "display_name": "Method",
                        "index": 10
                    },
                    "body": {
                        "key": "body",
                        "type": "text-area",
                        "values": [
                            {
                                "value": "${2.cicd}",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Body",
                        "index": 50
                    }
                },
                "output": {
                    "body": {
                        "key": "body",
                        "display_name": "body",
                        "hidden": false
                    },
                    "code": {
                        "key": "code",
                        "display_name": "code",
                        "hidden": false
                    },
                    "json_body": {
                        "key": "json_body",
                        "display_name": "json_body",
                        "value_type": "json_blob",
                        "hidden": false
                    }
                },
                "options": [],
                "position": {
                    "x": 306,
                    "y": 483
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Levelops Query",
                "size": {
                    "width": 320,
                    "height": 124
                }
            }
        },
        "links": {
            "7fb5339b-33e6-4f54-9015-1d7170f1702f": {
                "id": "7fb5339b-33e6-4f54-9015-1d7170f1702f",
                "from": {
                    "nodeId": "2",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "3",
                    "portId": "input"
                },
                "properties": {}
            },
            "174d2445-cc12-45ac-bab3-468f9b703fd3": {
                "id": "174d2445-cc12-45ac-bab3-468f9b703fd3",
                "from": {
                    "nodeId": "1",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "2",
                    "portId": "input"
                },
                "properties": {
                    "option": "Found"
                }
            },
            "d42c173a-1ff4-43d2-b8e0-9f33569b4f7f": {
                "id": "d42c173a-1ff4-43d2-b8e0-9f33569b4f7f",
                "from": {
                    "nodeId": "0",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "1",
                    "portId": "input"
                },
                "properties": {}
            }
        }
    }
}
