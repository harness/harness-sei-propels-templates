{
    "id": "09d59a14-deed-48e6-ab9d-02dfe6743e7a",
    "permanent_id": "dd966d01-c594-4506-b1bc-4e6c902be57a",
    "name": "PR Nudges V2",
    "description": "",
    "trigger_type": "scheduled",
    "trigger_template_type": "scheduled",
    "enabled": true,
    "nodes_dirty": true,
    "ui_data": {
        "nodes": {
            "0": {
                "id": "0",
                "type": "trigger",
                "description": "Scheduled - Trigger for playbooks to run on a specific schedule.",
                "ports": {
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "cron": {
                        "key": "cron",
                        "type": "text",
                        "values": [
                            {
                                "value": "",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "validation": "",
                        "options": [],
                        "default_value": "",
                        "display_name": "Schedule",
                        "description": "Specify a schedule using the UNIX cron format to trigger the playbook (the playbook won't run until the cron triggers for the first time).",
                        "index": 0
                    },
                    "interval_in_min": {
                        "key": "interval_in_min",
                        "type": "text",
                        "values": [
                            {
                                "value": "-1",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "validation": "",
                        "options": [],
                        "default_value": "",
                        "display_name": "Interval in minutes",
                        "description": "If Schedule is not specified, choose an interval in minutes to trigger the playbook periodically, starting immediately. Use -1 as a special value to trigger the playbook only once. It will trigger again every time the playbook is updated.",
                        "index": 0
                    }
                },
                "output": {
                    "cron": {
                        "key": "cron",
                        "display_name": "Schedule",
                        "type": "text",
                        "description": "Specify a schedule using the UNIX cron format to trigger the playbook (the playbook won't run until the cron triggers for the first time).",
                        "options": [],
                        "required": false,
                        "hidden": false,
                        "validation": "",
                        "default_value": ""
                    },
                    "interval_in_min": {
                        "key": "interval_in_min",
                        "display_name": "Interval in minutes",
                        "type": "text",
                        "description": "If Schedule is not specified, choose an interval in minutes to trigger the playbook periodically, starting immediately. Use -1 as a special value to trigger the playbook only once. It will trigger again every time the playbook is updated.",
                        "options": [],
                        "required": false,
                        "hidden": false,
                        "validation": "",
                        "default_value": ""
                    }
                },
                "options": [],
                "position": {
                    "x": 278,
                    "y": 50
                },
                "properties": {
                    "icon": "clock-circle"
                },
                "name": "Scheduled",
                "trigger_type": {
                    "label": "manual",
                    "key": "manual"
                },
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "1": {
                "id": "1",
                "type": "levelops_query",
                "description": "Make a call to a Levelops Query",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "ignore_errors": {
                        "key": "ignore_errors",
                        "type": "radio-group",
                        "values": [
                            {
                                "value": "No",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [
                            "Yes",
                            "No"
                        ],
                        "default_value": "Yes",
                        "display_name": "Ignore errors",
                        "description": "If Yes, this node will succeed regardless of the API response",
                        "index": 80
                    },
                    "headers": {
                        "key": "headers",
                        "type": "kv",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Headers",
                        "index": 30
                    },
                    "path": {
                        "key": "path",
                        "type": "text",
                        "values": [
                            {
                                "value": "v1/org/units/list",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Path",
                        "description": "Path appended to the base URL",
                        "index": 20
                    },
                    "password": {
                        "key": "password",
                        "type": "password_string",
                        "values": [],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Api Key",
                        "description": "Api key for Authentication to reach Levelops Query.",
                        "index": 70
                    },
                    "integration_id": {
                        "key": "integration_id",
                        "type": "single-dynamic-select",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "dynamic_resource_name": "integrations",
                        "display_name": "Satellite Integration",
                        "description": "Pick a satellite integration to make the call from. If not specified, LevelOps will only be able to reach public APIs.",
                        "index": 60
                    },
                    "content_type": {
                        "key": "content_type",
                        "type": "text",
                        "values": [
                            {
                                "value": "application/json",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Content Type",
                        "description": "Content type of the body (for example: \"application/json\")",
                        "index": 40
                    },
                    "method": {
                        "key": "method",
                        "type": "single-select",
                        "values": [
                            {
                                "value": "POST",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE"
                        ],
                        "default_value": "GET",
                        "display_name": "Method",
                        "index": 10
                    },
                    "body": {
                        "key": "body",
                        "type": "text-area",
                        "values": [
                            {
                                "value": "{\"page\":0,\"page_size\":50,\"filter\":{\"ou_category_id\":[\"${8.config.workspace_category}\"]}}",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Body",
                        "index": 50
                    }
                },
                "output": {
                    "body": {
                        "key": "body",
                        "display_name": "body",
                        "hidden": false
                    },
                    "code": {
                        "key": "code",
                        "display_name": "code",
                        "hidden": false
                    },
                    "json_body": {
                        "key": "json_body",
                        "display_name": "json_body",
                        "value_type": "json_blob",
                        "hidden": false
                    }
                },
                "options": [],
                "position": {
                    "x": 279,
                    "y": 255
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "List teams",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "2": {
                "id": "2",
                "type": "for_each",
                "description": "Iterate over items in a given list variable",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "list": {
                        "key": "list",
                        "type": "variable-select",
                        "values": [
                            {
                                "value": "${1.json_body.records}",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "list",
                        "description": "Select a variable that contains a list of items",
                        "index": 10
                    }
                },
                "output": {
                    "item": {
                        "key": "item",
                        "display_name": "item",
                        "value_type": "json_blob",
                        "hidden": false,
                        "content_type_from_input": "list",
                        "content_schema": {}
                    }
                },
                "options": [],
                "position": {
                    "x": 282,
                    "y": 362
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "For Each Team",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "4": {
                "id": "4",
                "type": "script",
                "description": "Custom logic using JavaScript",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "parameters": {
                        "key": "parameters",
                        "type": "kv",
                        "values": [
                            {
                                "value": {
                                    "key": "prs",
                                    "value": "${12.json_body.records}"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "threshold",
                                    "value": "2"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "ou",
                                    "value": "${2.item}"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "config",
                                    "value": "${8.config}"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "tags",
                                    "value": "${11.json_body.records}"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "large_prs",
                                    "value": "${21.json_body.records}"
                                },
                                "type": "json"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Input Parameters",
                        "description": "Specify input parameters that will be available within the script.",
                        "index": 10
                    },
                    "script": {
                        "key": "script",
                        "type": "text-editor",
                        "values": [
                            {
                                "value": "function handleNode(context) {\n  let prs  = JSON.parse(context.getParam('prs'));\n  let large_prs  = JSON.parse(context.getParam('large_prs'));\n  prs = prs.filter(item => !item.creator.includes(\"bot\"));\n  prs = prs.slice(0, 20);\n  \n  var tags = JSON.parse(context.getParam('tags'));\n  \n  const ou  = JSON.parse(context.getParam('ou'));\n  //const threshold  = JSON.parse(context.getParam('threshold'));\n  const now = parseInt(Date.now()/1000);\n  var config = JSON.parse(context.getParam(\"config\"));\n  const threshold = parseInt(config.pr_sla_days);\n  var shallow_comment_count = parseInt(config.shallow_comment_count);\n  const dayss = 86400*threshold;\n\n  var sla_message_header = \"<p><b>PRs Open for > \"+ threshold +\" Days</b><p>\";\n  var sla_message = \"\";\n  \n  var jira_missing_message_header = \"<p><b>PRs without Jira Linkage</b><p>\";\n  var jira_missing_message = \"\";\n  \n  var prs_without_reviews_message_hdr = \"<p><b>PRs without review comments</b><p>\";\n  var prs_without_reviews_message = \"\";\n  \n  var large_PRs_message_hdr = \"<p><b>PRs without review comments</b><p>\";\n  var large_PRs_message = \"\";\n\n  prs.forEach(\n    record => {\n      let url = \"https://github.com/\" + record.repo_id[0] + \"/pull/\" + record.number;\n      let openDays = ((Date.now()/1000 - record.pr_created_at)/86400);\n      // SLA message\n      if (now - record.pr_created_at > dayss) {\n        let updatedOn = (new Date(record.pr_updated_at * 1000)).toUTCString();\n        if (openDays < 14) {\n          sla_message +=\"<p><a href=\"+url+\">\"+ \"PR #\"+record.number +\"</a> - \" +record.creator + \" - \" + record.repo_id + \" - \" + record.title +\"</p>\";\n          sla_message +=\"<p>Last Updated: \"+updatedOn+\" - Open > \" +openDays.toFixed(1)+\" days </p>\";\n        }\n      }\n\n      // Jira linkage missing\n      if (!record.has_issue_keys) {\n        let updatedOn = (new Date(record.pr_updated_at * 1000)).toUTCString();\n        jira_missing_message +=\"<p><a href=\"+url+\">\"+ \"PR #\"+record.number +\"</a> - \" +record.creator + \" - \" + record.repo_id + \" - \" + record.title +\"</p>\";\n        jira_missing_message +=\"<p>Last Updated: \"+updatedOn+\" - Open > \" +openDays.toFixed(1)+\" days </p>\";\n      }\n\n      // PRs without review comments\n      if (record.comment_density === \"shallow\") {\n        prs_without_reviews_message +=\"<p><a href=\"+url+\">\"+ \"PR #\"+record.number +\"</a> - \" +record.creator + \" - \" + record.repo_id + \" - \" + record.title +\"</p>\";\n      }\n    }\n  );\n\n  //SLACK\n  var slackMessagePROpen = \"\";\n  var slackMessageJiraLink = \"\";\n  var slackMessagePRWithoutReviews = \"\";\n  var slackMessageLargePRs = \"\";\n  var messageBody = '';\n  var seconds = Math.round(new Date().getTime() / 1000);\n  var reminders = [];\n\n  if(prs.length > 0) {\n    slackMessagePROpen += \"PRs Open for more than \"+threshold+\" days - \"+ou.name+\" \\n\";\n    prs.forEach(\n      record => {\n        var url = \"https://github.com/\" + record.repo_id[0] + \"/pull/\" + record.number;\n        if((seconds - record.pr_created_at  > 86400*threshold) && (record.state === \"open\")) {\n          reminders.push(record);\n          var updatedOn = (new Date(record.pr_updated_at * 1000)).toUTCString();\n          var openDays = ((Date.now()/1000 - record.pr_created_at)/86400);\n\n          if(openDays < 14) {\n            slackMessagePROpen+= \"<\"+url+\"|PR #\"+record.number+\"> - [\"+record.creator+\"] - \"+record.repo_id[0]+\" - \"+record.title + \" \\n\";\n            slackMessagePROpen+= \"Last Updated: \"+updatedOn+\" - Open for \"+openDays.toFixed(1)+\" days \\n \\n\";\n          }\n        }\n\n        // missing JIRA keys\n        if (!record.has_issue_keys) {\n          slackMessageJiraLink+= \"<\"+url+\"|PR #\"+record.number+\"> - [\"+record.creator+\"] - \"+record.repo_id[0]+\" - \"+record.title + \" \\n\";\n        }\n\n        // PRs without review comments\n        if (record.comment_count <= shallow_comment_count) {\n          slackMessagePRWithoutReviews+= \"<\"+url+\"|PR #\"+record.number+\"> - [\"+record.creator+\"] - \"+record.repo_id[0]+\" - \"+record.title + \" \\n\";\n        }\n\n        // Large PRs message\n        if(record.code_change === \"large\") {\n          slackMessageLargePRs += \"<\"+url+\"|PR #\"+record.number+\"> - [\"+record.creator+\"] - \"+record.repo_id[0]+\" - \"+record.title + \" \\n\";\n        }\n      }\n    );\n  }\n  \n  large_prs.forEach(record => {\n    // Large PRs message\n    var url = \"https://github.com/\" + record.repo_id[0] + \"/pull/\" + record.number;\n    large_PRs_message += \"<p><a href=\"+url+\">\"+ \"PR #\"+record.number +\"</a> - \" +record.creator + \" - \" + record.repo_id + \" - \" + record.title +\"</p>\";\n    slackMessageLargePRs += \"<\"+url+\"|PR #\"+record.number+\"> - [\"+record.creator+\"] - \"+record.repo_id[0]+\" - \"+record.title + \" \\n\";\n  });\n\n  var message = \"\";\n  if(sla_message.length > 0) {\n    message += sla_message_header + sla_message;\n  }\n  if(jira_missing_message.length > 0) {\n    message += jira_missing_message_header + jira_missing_message;\n  }\n  if(prs_without_reviews_message.length > 0) {\n    message += prs_without_reviews_message_hdr + prs_without_reviews_message;\n  }\n  if(large_PRs_message.length > 0) {\n    message += large_PRs_message_hdr + large_PRs_message;\n  }\n  \n  var mail_ids = [\"shashank@propelo.ai\"], channel_ids = [];\n  if(ou.tags.length > 0) {\n    tags.forEach(function(tag) {\n      var tag_split = tag.split(\":\");\n      if(tag_split[0].toLowerCase() === \"mailid\") {\n        mail_ids.push(tag_split[1]);\n      } else if (tag_split[0].toLowerCase() === \"channelid\"){\n        channel_ids.push(tag_split[1]);\n      }\n    });\n  }\n\n\n  return { \n    state : 'success',\n    output : { \n      'message' : message,\n      'slackMessages': [slackMessagePROpen, slackMessageJiraLink, slackMessagePRWithoutReviews, slackMessageLargePRs],\n      'showSlackMessages': [config.showPRviolatingSLA, config.showPRwithoutJira, config.showPRwithoutComments, config.showLargePRs],\n      'mail_ids': mail_ids,\n      'channel_ids': channel_ids\n    } \n  };\n}",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "default_value": "prefix = 'hello ';\nfunction handleNode(context) {\n  name = context.getParam('name');\n  // levelops.serviceName().doSomething() - invoke a levelops service\n  return { \n    state : 'success',\n    output : { \n      'message' : prefix + name  \n    } \n  };\n}",
                        "display_name": "Script",
                        "description": "Write some custom logic using JavaScript.",
                        "index": 20
                    }
                },
                "output": {},
                "options": [],
                "position": {
                    "x": 283,
                    "y": 764
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Nudge Message",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "6": {
                "id": "6",
                "type": "email_notification",
                "description": "Send an Email to a user",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "user_email": {
                        "key": "user_email",
                        "type": "multi-custom-dynamic-select",
                        "values": [],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "dynamic_resource_name": "users",
                        "search_field": "email",
                        "display_name": "User Emails",
                        "description": "Emails of the recipients. Select from the list, or use a variable (it may contain one or more emails, separated by commas).",
                        "index": 10
                    },
                    "subject": {
                        "key": "subject",
                        "type": "text",
                        "values": [
                            {
                                "value": "PR Hygiene misses for ${2.item.name}",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Subject",
                        "index": 20
                    },
                    "text": {
                        "key": "text",
                        "type": "text-area",
                        "values": [
                            {
                                "value": "${4.message}",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "text",
                        "description": "Text message to send",
                        "index": 30
                    }
                },
                "output": {},
                "options": [],
                "position": {
                    "x": 446,
                    "y": 1213
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Send Email notification",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "8": {
                "id": "8",
                "type": "script",
                "description": "Custom logic using JavaScript",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "parameters": {
                        "key": "parameters",
                        "type": "kv",
                        "values": [
                            {
                                "value": {
                                    "key": "pr_sla_days",
                                    "value": "5"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "showLargePRs",
                                    "value": "true"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "showPRwithoutComments",
                                    "value": "true"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "showPRwithoutJira",
                                    "value": "true"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "sendSlackMsg",
                                    "value": "false"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "sendEmail",
                                    "value": "true"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "showPRviolatingSLA",
                                    "value": "true"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "prCreatedInLastDays",
                                    "value": "10"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "integrations",
                                    "value": "[\"229\", \"231\"]"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "workspace_category",
                                    "value": "f0a04a80-07b1-4016-81ff-652f63e6b8f3"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "shallow_comment_count",
                                    "value": "1"
                                },
                                "type": "json"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Input Parameters",
                        "description": "Specify input parameters that will be available within the script.",
                        "index": 10
                    },
                    "script": {
                        "key": "script",
                        "type": "text-editor",
                        "values": [
                            {
                                "value": "function handleNode(context) {\n  var prCreatedInLastDays = parseInt(context.getParam('prCreatedInLastDays'));\n  var pr_created_end_ts = Math.ceil(Date.now()/1000).toFixed();\n  var pr_created_start_ts = Math.floor((Date.now() - 86400000 * prCreatedInLastDays)/1000).toFixed();\n\n\n  return { \n    state : 'success',\n    output : { \n      config: {\n        pr_sla_days: parseInt(context.getParam('pr_sla_days')),\n        showPRwithoutComments: context.getParam('showPRwithoutComments') === \"true\",\n        showLargePRs: context.getParam('showLargePRs') === \"true\",\n        showPRwithoutJira: context.getParam('showPRwithoutJira') === \"true\",\n        sendSlackMsg: context.getParam('sendSlackMsg') === \"true\",\n        sendEmail: context.getParam('sendEmail') === \"true\",\n        showPRviolatingSLA: context.getParam('showPRviolatingSLA') === \"true\",\n        pr_created_start_ts: pr_created_start_ts,\n        pr_created_end_ts: pr_created_end_ts,\n        integrations: context.getParam(\"integrations\"),\n        workspace_category: context.getParam(\"workspace_category\"),\n        shallow_comment_count: context.getParam(\"workspace_category\")\n      }\n    } \n  };\n}",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "default_value": "prefix = 'hello ';\nfunction handleNode(context) {\n  name = context.getParam('name');\n  // levelops.serviceName().doSomething() - invoke a levelops service\n  return { \n    state : 'success',\n    output : { \n      'message' : prefix + name  \n    } \n  };\n}",
                        "display_name": "Script",
                        "description": "Write some custom logic using JavaScript.",
                        "index": 20
                    }
                },
                "output": {},
                "options": [],
                "position": {
                    "x": 276,
                    "y": 152
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Params ",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "9": {
                "id": "9",
                "type": "if_condition",
                "description": "Evaluate condition",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "lql": {
                        "key": "lql",
                        "type": "text",
                        "values": [
                            {
                                "value": "${8.config.sendSlackMsg} = true",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "LQL",
                        "description": "Use LevelOps Query Language to query the data",
                        "index": 10
                    }
                },
                "output": {
                    "result": {
                        "key": "result",
                        "display_name": "result",
                        "content_type": "boolean",
                        "value_type": "string",
                        "hidden": false
                    }
                },
                "options": [
                    "True",
                    "False"
                ],
                "position": {
                    "x": 124,
                    "y": 871
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Send Slack Msg?",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "10": {
                "id": "10",
                "type": "if_condition",
                "description": "Evaluate condition",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "lql": {
                        "key": "lql",
                        "type": "text",
                        "values": [
                            {
                                "value": "${8.config.sendEmail} = true",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "LQL",
                        "description": "Use LevelOps Query Language to query the data",
                        "index": 10
                    }
                },
                "output": {
                    "result": {
                        "key": "result",
                        "display_name": "result",
                        "content_type": "boolean",
                        "value_type": "string",
                        "hidden": false
                    }
                },
                "options": [
                    "True",
                    "False"
                ],
                "position": {
                    "x": 448,
                    "y": 1009
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Send Email?",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "11": {
                "id": "11",
                "type": "levelops_query",
                "description": "Make a call to a Levelops Query",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "ignore_errors": {
                        "key": "ignore_errors",
                        "type": "radio-group",
                        "values": [
                            {
                                "value": "Yes",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [
                            "Yes",
                            "No"
                        ],
                        "default_value": "Yes",
                        "display_name": "Ignore errors",
                        "description": "If Yes, this node will succeed regardless of the API response",
                        "index": 80
                    },
                    "headers": {
                        "key": "headers",
                        "type": "kv",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Headers",
                        "index": 30
                    },
                    "path": {
                        "key": "path",
                        "type": "text",
                        "values": [
                            {
                                "value": "v1/tags/list",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Path",
                        "description": "Path appended to the base URL",
                        "index": 20
                    },
                    "password": {
                        "key": "password",
                        "type": "password_string",
                        "values": [],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Api Key",
                        "description": "Api key for Authentication to reach Levelops Query.",
                        "index": 70
                    },
                    "integration_id": {
                        "key": "integration_id",
                        "type": "single-dynamic-select",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "dynamic_resource_name": "integrations",
                        "display_name": "Satellite Integration",
                        "description": "Pick a satellite integration to make the call from. If not specified, LevelOps will only be able to reach public APIs.",
                        "index": 60
                    },
                    "content_type": {
                        "key": "content_type",
                        "type": "text",
                        "values": [
                            {
                                "value": "application/json",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Content Type",
                        "description": "Content type of the body (for example: \"application/json\")",
                        "index": 40
                    },
                    "method": {
                        "key": "method",
                        "type": "single-select",
                        "values": [
                            {
                                "value": "POST",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE"
                        ],
                        "default_value": "GET",
                        "display_name": "Method",
                        "index": 10
                    },
                    "body": {
                        "key": "body",
                        "type": "text-area",
                        "values": [
                            {
                                "value": "{\"filter\":{\"tag_ids\": ${2.item.tags} }}",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Body",
                        "index": 50
                    }
                },
                "output": {
                    "body": {
                        "key": "body",
                        "display_name": "body",
                        "hidden": false
                    },
                    "code": {
                        "key": "code",
                        "display_name": "code",
                        "hidden": false
                    },
                    "json_body": {
                        "key": "json_body",
                        "display_name": "json_body",
                        "value_type": "json_blob",
                        "hidden": false
                    }
                },
                "options": [],
                "position": {
                    "x": 283,
                    "y": 455
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Get Tags",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "12": {
                "id": "12",
                "type": "levelops_query",
                "description": "Make a call to a Levelops Query",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "ignore_errors": {
                        "key": "ignore_errors",
                        "type": "radio-group",
                        "values": [
                            {
                                "value": "Yes",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [
                            "Yes",
                            "No"
                        ],
                        "default_value": "Yes",
                        "display_name": "Ignore errors",
                        "description": "If Yes, this node will succeed regardless of the API response",
                        "index": 80
                    },
                    "headers": {
                        "key": "headers",
                        "type": "kv",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Headers",
                        "index": 30
                    },
                    "path": {
                        "key": "path",
                        "type": "text",
                        "values": [
                            {
                                "value": "v1/scm/prs/list",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Path",
                        "description": "Path appended to the base URL",
                        "index": 20
                    },
                    "password": {
                        "key": "password",
                        "type": "password_string",
                        "values": [],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Api Key",
                        "description": "Api key for Authentication to reach Levelops Query.",
                        "index": 70
                    },
                    "integration_id": {
                        "key": "integration_id",
                        "type": "single-dynamic-select",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "dynamic_resource_name": "integrations",
                        "display_name": "Satellite Integration",
                        "description": "Pick a satellite integration to make the call from. If not specified, LevelOps will only be able to reach public APIs.",
                        "index": 60
                    },
                    "content_type": {
                        "key": "content_type",
                        "type": "text",
                        "values": [
                            {
                                "value": "application/json",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Content Type",
                        "description": "Content type of the body (for example: \"application/json\")",
                        "index": 40
                    },
                    "method": {
                        "key": "method",
                        "type": "single-select",
                        "values": [
                            {
                                "value": "POST",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE"
                        ],
                        "default_value": "GET",
                        "display_name": "Method",
                        "index": 10
                    },
                    "body": {
                        "key": "body",
                        "type": "text-area",
                        "values": [
                            {
                                "value": "{\n    \"page\": 0,\n    \"page_size\": 100,\n    \"filter\": {\n        \"pr_created_at\": {\n            \"$lt\": ${8.config.pr_created_end_ts},\n            \"$gt\": ${8.config.pr_created_start_ts}\n        },\n        \"product_id\": \"1\",\n        \"integration_ids\": ${8.config.integrations},\n        \"code_change_size_unit\": \"files\",\n        \"code_change_size_config\": {\n            \"small\": \"50\",\n            \"medium\": \"150\"\n        },\n        \"comment_density_size_config\": {\n            \"shallow\": \"1\",\n            \"good\": \"5\"\n        }\n    },\n    \"across\": \"pr_created\",\n    \"ou_ids\": [\n        \"${2.item.id}\"\n    ],\n    \"ou_exclusions\": [\n        \"pr_created\"\n    ],\n    \"widget_id\": \"d469a460-3e12-11ed-b40b-dbd07ede2d0a\"\n}",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Body",
                        "index": 50
                    }
                },
                "output": {
                    "body": {
                        "key": "body",
                        "display_name": "body",
                        "hidden": false
                    },
                    "code": {
                        "key": "code",
                        "display_name": "code",
                        "hidden": false
                    },
                    "json_body": {
                        "key": "json_body",
                        "display_name": "json_body",
                        "value_type": "json_blob",
                        "hidden": false
                    }
                },
                "options": [],
                "position": {
                    "x": 283,
                    "y": 554
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "get PRs list",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "15": {
                "id": "15",
                "type": "for_each",
                "description": "Iterate over items in a given list variable",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "list": {
                        "key": "list",
                        "type": "variable-select",
                        "values": [
                            {
                                "value": "${4.slackMessages}",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "list",
                        "description": "Select a variable that contains a list of items",
                        "index": 10
                    }
                },
                "output": {
                    "item": {
                        "key": "item",
                        "display_name": "item",
                        "value_type": "json_blob",
                        "hidden": false,
                        "content_type_from_input": "list",
                        "content_type": "json_blob"
                    }
                },
                "options": [],
                "position": {
                    "x": 123,
                    "y": 1010
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "For Each Item In List",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "16": {
                "id": "16",
                "type": "script",
                "description": "Custom logic using JavaScript",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "parameters": {
                        "key": "parameters",
                        "type": "kv",
                        "values": [
                            {
                                "value": {
                                    "key": "message",
                                    "value": "${15.item}"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "slackMessages",
                                    "value": "${4.slackMessages}"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "showSlackMessages",
                                    "value": "${4.showSlackMessages}"
                                },
                                "type": "json"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Input Parameters",
                        "description": "Specify input parameters that will be available within the script.",
                        "index": 10
                    },
                    "script": {
                        "key": "script",
                        "type": "text-editor",
                        "values": [
                            {
                                "value": "prefix = 'hello ';\nfunction handleNode(context) {\n  var slackMessages = JSON.parse(context.getParam('slackMessages'));\n  var message = context.getParam('message');\n    var showSlackMessages = JSON.parse(context.getParam('showSlackMessages'));\n  \n  // levelops.serviceName().doSomething() - invoke a levelops service\n  return { \n    state : 'success',\n    output : { \n      'sendMessage' : showSlackMessages[slackMessages.indexOf(message)]\n    } \n  };\n}",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "default_value": "prefix = 'hello ';\nfunction handleNode(context) {\n  name = context.getParam('name');\n  // levelops.serviceName().doSomething() - invoke a levelops service\n  return { \n    state : 'success',\n    output : { \n      'message' : prefix + name  \n    } \n  };\n}",
                        "display_name": "Script",
                        "description": "Write some custom logic using JavaScript.",
                        "index": 20
                    }
                },
                "output": {},
                "options": [],
                "position": {
                    "x": 122,
                    "y": 1112
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Send Message?",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "17": {
                "id": "17",
                "type": "slack_notification",
                "description": "Send a Slack message to a user",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "user_email": {
                        "key": "user_email",
                        "type": "multi-custom-dynamic-select",
                        "values": [],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "dynamic_resource_name": "users",
                        "search_field": "email",
                        "display_name": "Recipient Slack Channels or User Emails",
                        "description": "Names of the Slack channels (e.g. 'general'), and/or emails of the recipients. Select an email from the list, or enter a recipient. You can also use a variable (it may contain one or more emails, separated by commas).",
                        "index": 10
                    },
                    "bot_name": {
                        "key": "bot_name",
                        "type": "text",
                        "values": [
                            {
                                "value": "PR Hygiene",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Bot Name",
                        "description": "Name of the sender in Slack",
                        "index": 20
                    },
                    "text": {
                        "key": "text",
                        "type": "text-area",
                        "values": [
                            {
                                "value": "${15.item} ",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "text",
                        "description": "Text message to send",
                        "index": 30
                    }
                },
                "output": {},
                "options": [],
                "position": {
                    "x": 123,
                    "y": 1453
                },
                "properties": {
                    "icon": "slack"
                },
                "name": "Send Slack notification",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "18": {
                "id": "18",
                "type": "if_condition",
                "description": "Evaluate condition",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "lql": {
                        "key": "lql",
                        "type": "text",
                        "values": [
                            {
                                "value": "${18.sendMessage} = true",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "LQL",
                        "description": "Use LevelOps Query Language to query the data",
                        "index": 10
                    }
                },
                "output": {
                    "result": {
                        "key": "result",
                        "display_name": "result",
                        "content_type": "boolean",
                        "value_type": "string",
                        "hidden": false
                    }
                },
                "options": [
                    "True",
                    "False"
                ],
                "position": {
                    "x": 118,
                    "y": 1211
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "If Condition",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "19": {
                "id": "19",
                "type": "for_each",
                "description": "Iterate over items in a given list variable",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "list": {
                        "key": "list",
                        "type": "variable-select",
                        "values": [
                            {
                                "value": "${4.channel_ids}",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "list",
                        "description": "Select a variable that contains a list of items",
                        "index": 10
                    }
                },
                "output": {
                    "item": {
                        "key": "item",
                        "display_name": "item",
                        "value_type": "json_blob",
                        "hidden": false,
                        "content_type_from_input": "list",
                        "content_type": "json_blob"
                    }
                },
                "options": [],
                "position": {
                    "x": 128,
                    "y": 1344
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "For Each Item In List",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "20": {
                "id": "20",
                "type": "for_each",
                "description": "Iterate over items in a given list variable",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "list": {
                        "key": "list",
                        "type": "variable-select",
                        "values": [
                            {
                                "value": "${4.mail_ids}",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "list",
                        "description": "Select a variable that contains a list of items",
                        "index": 10
                    }
                },
                "output": {
                    "item": {
                        "key": "item",
                        "display_name": "item",
                        "value_type": "json_blob",
                        "hidden": false,
                        "content_type_from_input": "list",
                        "content_type": "json_blob"
                    }
                },
                "options": [],
                "position": {
                    "x": 444,
                    "y": 1107
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "For Each Item In List",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "21": {
                "id": "21",
                "type": "levelops_query",
                "description": "Make a call to a Levelops Query",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "ignore_errors": {
                        "key": "ignore_errors",
                        "type": "radio-group",
                        "values": [
                            {
                                "value": "Yes",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [
                            "Yes",
                            "No"
                        ],
                        "default_value": "Yes",
                        "display_name": "Ignore errors",
                        "description": "If Yes, this node will succeed regardless of the API response",
                        "index": 80
                    },
                    "headers": {
                        "key": "headers",
                        "type": "kv",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Headers",
                        "index": 30
                    },
                    "path": {
                        "key": "path",
                        "type": "text",
                        "values": [
                            {
                                "value": "v1/scm/prs/list",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Path",
                        "description": "Path appended to the base URL",
                        "index": 20
                    },
                    "password": {
                        "key": "password",
                        "type": "password_string",
                        "values": [],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Api Key",
                        "description": "Api key for Authentication to reach Levelops Query.",
                        "index": 70
                    },
                    "integration_id": {
                        "key": "integration_id",
                        "type": "single-dynamic-select",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "dynamic_resource_name": "integrations",
                        "display_name": "Satellite Integration",
                        "description": "Pick a satellite integration to make the call from. If not specified, LevelOps will only be able to reach public APIs.",
                        "index": 60
                    },
                    "content_type": {
                        "key": "content_type",
                        "type": "text",
                        "values": [
                            {
                                "value": "application/json",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Content Type",
                        "description": "Content type of the body (for example: \"application/json\")",
                        "index": 40
                    },
                    "method": {
                        "key": "method",
                        "type": "single-select",
                        "values": [
                            {
                                "value": "POST",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE"
                        ],
                        "default_value": "GET",
                        "display_name": "Method",
                        "index": 10
                    },
                    "body": {
                        "key": "body",
                        "type": "text-area",
                        "values": [
                            {
                                "value": "{\n    \"page\": 0,\n    \"page_size\": 10,\n    \"filter\": {\n        \"code_change_sizes\": [\n            \"large\"\n        ],\n        \"integration_ids\": ${8.config.integrations},\n        \"code_change_size_unit\": \"lines\",\n        \"code_change_size_config\": {\n            \"small\": \"50\",\n            \"medium\": \"150\"\n        },\n        \"comment_density_size_config\": {\n            \"shallow\": \"1\",\n            \"good\": \"5\"\n        },\n        \"pr_created_at\": {\n            \"$lt\": ${8.config.pr_created_end_ts},\n            \"$gt\": ${8.config.pr_created_start_ts}\n        }\n    },\n    \"across\": \"pr_created\",\n    \"ou_ids\": [\n        \"${2.item.id}\"\n    ],\n    \"ou_exclusions\": [\n        \"pr_created\"\n    ],\n    \"widget_id\": \"59cf0d80-2797-11ed-9d89-3bb7b15e724a\"\n}",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Body",
                        "index": 50
                    }
                },
                "output": {
                    "body": {
                        "key": "body",
                        "display_name": "body",
                        "hidden": false
                    },
                    "code": {
                        "key": "code",
                        "display_name": "code",
                        "hidden": false
                    },
                    "json_body": {
                        "key": "json_body",
                        "display_name": "json_body",
                        "value_type": "json_blob",
                        "hidden": false
                    }
                },
                "options": [],
                "position": {
                    "x": 284,
                    "y": 656
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "large PRs list",
                "size": {
                    "width": 320,
                    "height": 124
                }
            }
        },
        "links": {
            "1ba8e1c0-26f7-45b8-aad4-86624528ed66": {
                "id": "1ba8e1c0-26f7-45b8-aad4-86624528ed66",
                "from": {
                    "nodeId": "4",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "10",
                    "portId": "input"
                },
                "properties": {}
            },
            "9ae51994-c4a5-463f-9318-d99bd914e6ce": {
                "id": "9ae51994-c4a5-463f-9318-d99bd914e6ce",
                "from": {
                    "nodeId": "2",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "11",
                    "portId": "input"
                },
                "properties": {}
            },
            "e9f93aa8-070d-47f3-b206-7b8e83f5de95": {
                "id": "e9f93aa8-070d-47f3-b206-7b8e83f5de95",
                "from": {
                    "nodeId": "19",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "17",
                    "portId": "input"
                },
                "properties": {}
            },
            "4859b216-5069-4e63-954e-d61eec9fc0da": {
                "id": "4859b216-5069-4e63-954e-d61eec9fc0da",
                "from": {
                    "nodeId": "15",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "16",
                    "portId": "input"
                },
                "properties": {}
            },
            "c801705e-9806-4762-b87e-2dc7c0d678a6": {
                "id": "c801705e-9806-4762-b87e-2dc7c0d678a6",
                "from": {
                    "nodeId": "4",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "9",
                    "portId": "input"
                },
                "properties": {}
            },
            "b5b6a6b0-6668-49e6-a31d-f56c6aefd470": {
                "id": "b5b6a6b0-6668-49e6-a31d-f56c6aefd470",
                "from": {
                    "nodeId": "11",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "12",
                    "portId": "input"
                },
                "properties": {}
            },
            "40a39ffe-628d-417c-b0c0-bb0b226310b8": {
                "id": "40a39ffe-628d-417c-b0c0-bb0b226310b8",
                "from": {
                    "nodeId": "0",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "8",
                    "portId": "input"
                },
                "properties": {}
            },
            "6f77f7f6-b599-49c2-b728-69973b607a1a": {
                "id": "6f77f7f6-b599-49c2-b728-69973b607a1a",
                "from": {
                    "nodeId": "12",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "21",
                    "portId": "input"
                },
                "properties": {}
            },
            "b07ef09a-4444-44c5-8b28-e0443ec8b469": {
                "id": "b07ef09a-4444-44c5-8b28-e0443ec8b469",
                "from": {
                    "nodeId": "8",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "1",
                    "portId": "input"
                },
                "properties": {}
            },
            "38373995-65a2-4b04-9a14-ece51497eccd": {
                "id": "38373995-65a2-4b04-9a14-ece51497eccd",
                "from": {
                    "nodeId": "16",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "18",
                    "portId": "input"
                },
                "properties": {}
            },
            "7348c42a-e648-4323-b5b8-ed579cc485ad": {
                "id": "7348c42a-e648-4323-b5b8-ed579cc485ad",
                "from": {
                    "nodeId": "9",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "15",
                    "portId": "input"
                },
                "properties": {
                    "option": "True"
                }
            },
            "f628b859-df6d-4e35-b8c1-f6b29dde0af0": {
                "id": "f628b859-df6d-4e35-b8c1-f6b29dde0af0",
                "from": {
                    "nodeId": "21",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "4",
                    "portId": "input"
                },
                "properties": {}
            },
            "5cdf523f-d538-4672-8041-180188b541fa": {
                "id": "5cdf523f-d538-4672-8041-180188b541fa",
                "from": {
                    "nodeId": "18",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "19",
                    "portId": "input"
                },
                "properties": {
                    "option": "True"
                }
            },
            "8442b130-0ec4-443f-ab73-a54457cbb274": {
                "id": "8442b130-0ec4-443f-ab73-a54457cbb274",
                "from": {
                    "nodeId": "20",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "6",
                    "portId": "input"
                },
                "properties": {}
            },
            "fb6785f5-e0ba-4a2e-a324-bfef0f406acd": {
                "id": "fb6785f5-e0ba-4a2e-a324-bfef0f406acd",
                "from": {
                    "nodeId": "1",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "2",
                    "portId": "input"
                },
                "properties": {}
            },
            "67632f36-5e58-4466-9cee-450f764a1b00": {
                "id": "67632f36-5e58-4466-9cee-450f764a1b00",
                "from": {
                    "nodeId": "10",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "20",
                    "portId": "input"
                },
                "properties": {
                    "option": "True"
                }
            }
        }
    }
}
