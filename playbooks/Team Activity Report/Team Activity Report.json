{
    "id": "a4cdc671-bf29-455f-92da-1ed3899270db",
    "permanent_id": "331653d0-19b4-457b-944c-8ce04cdffbc1",
    "name": "Team Activity Report",
    "description": "",
    "trigger_type": "scheduled",
    "trigger_template_type": "scheduled",
    "enabled": true,
    "nodes_dirty": true,
    "ui_data": {
        "nodes": {
            "0": {
                "id": "0",
                "type": "trigger",
                "description": "Scheduled - Trigger for playbooks to run on a specific schedule.",
                "ports": {
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "cron": {
                        "key": "cron",
                        "type": "text",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "validation": "",
                        "options": [],
                        "default_value": "",
                        "display_name": "Schedule",
                        "description": "Specify a schedule using the UNIX cron format to trigger the playbook (the playbook won't run until the cron triggers for the first time).",
                        "index": 0
                    },
                    "interval_in_min": {
                        "key": "interval_in_min",
                        "type": "text",
                        "values": [
                            {
                                "value": "-1",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "validation": "",
                        "options": [],
                        "default_value": "",
                        "display_name": "Interval in minutes",
                        "description": "If Schedule is not specified, choose an interval in minutes to trigger the playbook periodically, starting immediately. Use -1 as a special value to trigger the playbook only once. It will trigger again every time the playbook is updated.",
                        "index": 0
                    }
                },
                "output": {
                    "cron": {
                        "key": "cron",
                        "display_name": "Schedule",
                        "type": "text",
                        "description": "Specify a schedule using the UNIX cron format to trigger the playbook (the playbook won't run until the cron triggers for the first time).",
                        "options": [],
                        "required": false,
                        "hidden": false,
                        "validation": "",
                        "default_value": ""
                    },
                    "interval_in_min": {
                        "key": "interval_in_min",
                        "display_name": "Interval in minutes",
                        "type": "text",
                        "description": "If Schedule is not specified, choose an interval in minutes to trigger the playbook periodically, starting immediately. Use -1 as a special value to trigger the playbook only once. It will trigger again every time the playbook is updated.",
                        "options": [],
                        "required": false,
                        "hidden": false,
                        "validation": "",
                        "default_value": ""
                    }
                },
                "options": [],
                "position": {
                    "x": 300,
                    "y": 50
                },
                "properties": {
                    "icon": "clock-circle"
                },
                "name": "Scheduled",
                "trigger_type": {
                    "label": "manual",
                    "key": "manual"
                },
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "1": {
                "id": "1",
                "type": "script",
                "description": "Custom logic using JavaScript",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "parameters": {
                        "key": "parameters",
                        "type": "kv",
                        "values": [
                            {
                                "value": {
                                    "key": "default_threshold_PRs",
                                    "value": "5"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "default_threshold_stories",
                                    "value": "5"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "default_threshold_sp",
                                    "value": "5"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "integration_ids",
                                    "value": "[\"229\", \"231\"]"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "workspace_category",
                                    "value": "f0a04a80-07b1-4016-81ff-652f63e6b8f3"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "days_range",
                                    "value": "21"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "jira_done_statuses",
                                    "value": "[\"DONE\", \"READY FOR PROD\"]"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "projects",
                                    "value": "[\"PROP\"]"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "story_point_custom_field",
                                    "value": ""
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "jira_story_type",
                                    "value": "[\"STORY\"]"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "jira_bug_type",
                                    "value": "[\"BUG\"]"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "jira_task_type",
                                    "value": "[\"TASK\"]"
                                },
                                "type": "json"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Input Parameters",
                        "description": "Specify input parameters that will be available within the script.",
                        "index": 10
                    },
                    "script": {
                        "key": "script",
                        "type": "text-editor",
                        "values": [
                            {
                                "value": "function handleNode(context) {\n\n  var threshold_table = JSON.parse(levelops.tables().query(\"Activity Threshold\"));\n  var threshold_map = threshold_table.reduce(function(map, entry) {\n    map[entry.name] = entry;\n    return map;\n  }, {});\n\n  var days = parseInt(context.getParam(\"days_range\"));\n  var end_ts = Math.ceil(Date.now()/1000).toFixed();\n  var start_ts = Math.floor((Date.now() - 86400000 * days)/1000).toFixed();\n\n\n  return { \n    state : 'success',\n    output : {\n      config: {\n        default_threshold_PRs: context.getParam(\"default_threshold_PRs\"),\n        default_threshold_stories: context.getParam(\"default_threshold_stories\"),\n        default_threshold_sp: context.getParam(\"default_threshold_sp\"),\n        workspace_category: context.getParam(\"workspace_category\"),\n        integration_ids: context.getParam(\"integration_ids\"),\n        jira_done_statuses: JSON.parse(context.getParam(\"jira_done_statuses\")),\n        projects: JSON.parse(context.getParam(\"projects\")),\n        story_point_custom_field: context.getParam(\"story_point_custom_field\"),\n        jira_story_type: JSON.parse(context.getParam(\"jira_story_type\")),\n        jira_bug_type: JSON.parse(context.getParam(\"jira_bug_type\")),\n        jira_task_type: JSON.parse(context.getParam(\"jira_task_type\")),\n        threshold_map: threshold_map,\n        start_ts: start_ts,\n        end_ts: end_ts\n      }\n    } \n  };\n}",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "default_value": "prefix = 'hello ';\nfunction handleNode(context) {\n  name = context.getParam('name');\n  // levelops.serviceName().doSomething() - invoke a levelops service\n  return { \n    state : 'success',\n    output : { \n      'message' : prefix + name  \n    } \n  };\n}",
                        "display_name": "Script",
                        "description": "Write some custom logic using JavaScript.",
                        "index": 20
                    }
                },
                "output": {},
                "options": [],
                "position": {
                    "x": 298,
                    "y": 170
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Configuration",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "2": {
                "id": "2",
                "type": "levelops_query",
                "description": "Make a call to a Levelops Query",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "ignore_errors": {
                        "key": "ignore_errors",
                        "type": "radio-group",
                        "values": [
                            {
                                "value": "Yes",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [
                            "Yes",
                            "No"
                        ],
                        "default_value": "Yes",
                        "display_name": "Ignore errors",
                        "description": "If Yes, this node will succeed regardless of the API response",
                        "index": 80
                    },
                    "headers": {
                        "key": "headers",
                        "type": "kv",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Headers",
                        "index": 30
                    },
                    "path": {
                        "key": "path",
                        "type": "text",
                        "values": [
                            {
                                "value": "v1/org/units/list",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Path",
                        "description": "Path appended to the base URL",
                        "index": 20
                    },
                    "password": {
                        "key": "password",
                        "type": "password_string",
                        "values": [],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Api Key",
                        "description": "Api key for Authentication to reach Levelops Query.",
                        "index": 70
                    },
                    "integration_id": {
                        "key": "integration_id",
                        "type": "single-dynamic-select",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "dynamic_resource_name": "integrations",
                        "display_name": "Satellite Integration",
                        "description": "Pick a satellite integration to make the call from. If not specified, LevelOps will only be able to reach public APIs.",
                        "index": 60
                    },
                    "content_type": {
                        "key": "content_type",
                        "type": "text",
                        "values": [
                            {
                                "value": "application/json",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Content Type",
                        "description": "Content type of the body (for example: \"application/json\")",
                        "index": 40
                    },
                    "method": {
                        "key": "method",
                        "type": "single-select",
                        "values": [
                            {
                                "value": "POST",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE"
                        ],
                        "default_value": "GET",
                        "display_name": "Method",
                        "index": 10
                    },
                    "body": {
                        "key": "body",
                        "type": "text-area",
                        "values": [
                            {
                                "value": "{\"page\":0,\"page_size\":50,\"filter\":{\"ou_category_id\":[\"767dca27-a114-4ce1-919a-8c5e9f8c80d8\"],\"partial\":{\"name\":\"corp\"}}}",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Body",
                        "index": 50
                    }
                },
                "output": {
                    "body": {
                        "key": "body",
                        "display_name": "body",
                        "hidden": false
                    },
                    "code": {
                        "key": "code",
                        "display_name": "code",
                        "hidden": false
                    },
                    "json_body": {
                        "key": "json_body",
                        "display_name": "json_body",
                        "value_type": "json_blob",
                        "hidden": false
                    }
                },
                "options": [],
                "position": {
                    "x": 298,
                    "y": 294
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Get Teams",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "3": {
                "id": "3",
                "type": "for_each",
                "description": "Iterate over items in a given list variable",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "list": {
                        "key": "list",
                        "type": "variable-select",
                        "values": [
                            {
                                "value": "${2.json_body.records}",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "list",
                        "description": "Select a variable that contains a list of items",
                        "index": 10
                    }
                },
                "output": {
                    "item": {
                        "key": "item",
                        "display_name": "item",
                        "value_type": "json_blob",
                        "hidden": false,
                        "content_type_from_input": "list",
                        "content_schema": {}
                    }
                },
                "options": [],
                "position": {
                    "x": 298,
                    "y": 414
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "For Each Team",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "4": {
                "id": "4",
                "type": "levelops_query",
                "description": "Make a call to a Levelops Query",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "ignore_errors": {
                        "key": "ignore_errors",
                        "type": "radio-group",
                        "values": [
                            {
                                "value": "Yes",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [
                            "Yes",
                            "No"
                        ],
                        "default_value": "Yes",
                        "display_name": "Ignore errors",
                        "description": "If Yes, this node will succeed regardless of the API response",
                        "index": 80
                    },
                    "headers": {
                        "key": "headers",
                        "type": "kv",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Headers",
                        "index": 30
                    },
                    "path": {
                        "key": "path",
                        "type": "text",
                        "values": [
                            {
                                "value": "v1/jira_issues/list",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Path",
                        "description": "Path appended to the base URL",
                        "index": 20
                    },
                    "password": {
                        "key": "password",
                        "type": "password_string",
                        "values": [],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Api Key",
                        "description": "Api key for Authentication to reach Levelops Query.",
                        "index": 70
                    },
                    "integration_id": {
                        "key": "integration_id",
                        "type": "single-dynamic-select",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "dynamic_resource_name": "integrations",
                        "display_name": "Satellite Integration",
                        "description": "Pick a satellite integration to make the call from. If not specified, LevelOps will only be able to reach public APIs.",
                        "index": 60
                    },
                    "content_type": {
                        "key": "content_type",
                        "type": "text",
                        "values": [
                            {
                                "value": "application/json",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Content Type",
                        "description": "Content type of the body (for example: \"application/json\")",
                        "index": 40
                    },
                    "method": {
                        "key": "method",
                        "type": "single-select",
                        "values": [
                            {
                                "value": "POST",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE"
                        ],
                        "default_value": "GET",
                        "display_name": "Method",
                        "index": 10
                    },
                    "body": {
                        "key": "body",
                        "type": "text-area",
                        "values": [
                            {
                                "value": "{\n    \"page\": 0,\n    \"page_size\": 100,\n    \"sort\": [\n        {\n            \"id\": \"bounces\",\n            \"desc\": true\n        }\n    ],\n    \"filter\": {\n        \"metric\": \"ticket\",\n        \"projects\": ${1.config.projects},\n        \"visualization\": \"bar_chart\",\n        \"issue_resolved_at\": {\n            \"$gt\": ${1.config.start_ts},\n            \"$lt\": ${1.config.end_ts}\n        },\n        \"integration_ids\": ${1.config.integration_ids}\n    },\n    \"across\": \"issue_resolved\",\n    \"ou_ids\": [\n        \"${3.item.id}\"\n    ]\n}",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Body",
                        "index": 50
                    }
                },
                "output": {
                    "body": {
                        "key": "body",
                        "display_name": "body",
                        "hidden": false
                    },
                    "code": {
                        "key": "code",
                        "display_name": "code",
                        "hidden": false
                    },
                    "json_body": {
                        "key": "json_body",
                        "display_name": "json_body",
                        "value_type": "json_blob",
                        "hidden": false
                    }
                },
                "options": [],
                "position": {
                    "x": 297,
                    "y": 534
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Get Issues resolved",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "6": {
                "id": "6",
                "type": "levelops_query",
                "description": "Make a call to a Levelops Query",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "ignore_errors": {
                        "key": "ignore_errors",
                        "type": "radio-group",
                        "values": [
                            {
                                "value": "Yes",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [
                            "Yes",
                            "No"
                        ],
                        "default_value": "Yes",
                        "display_name": "Ignore errors",
                        "description": "If Yes, this node will succeed regardless of the API response",
                        "index": 80
                    },
                    "headers": {
                        "key": "headers",
                        "type": "kv",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Headers",
                        "index": 30
                    },
                    "path": {
                        "key": "path",
                        "type": "text",
                        "values": [
                            {
                                "value": "v1/scm/prs/list",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Path",
                        "description": "Path appended to the base URL",
                        "index": 20
                    },
                    "password": {
                        "key": "password",
                        "type": "password_string",
                        "values": [],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Api Key",
                        "description": "Api key for Authentication to reach Levelops Query.",
                        "index": 70
                    },
                    "integration_id": {
                        "key": "integration_id",
                        "type": "single-dynamic-select",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "dynamic_resource_name": "integrations",
                        "display_name": "Satellite Integration",
                        "description": "Pick a satellite integration to make the call from. If not specified, LevelOps will only be able to reach public APIs.",
                        "index": 60
                    },
                    "content_type": {
                        "key": "content_type",
                        "type": "text",
                        "values": [
                            {
                                "value": "application/json",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Content Type",
                        "description": "Content type of the body (for example: \"application/json\")",
                        "index": 40
                    },
                    "method": {
                        "key": "method",
                        "type": "single-select",
                        "values": [
                            {
                                "value": "POST",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE"
                        ],
                        "default_value": "GET",
                        "display_name": "Method",
                        "index": 10
                    },
                    "body": {
                        "key": "body",
                        "type": "text-area",
                        "values": [
                            {
                                "value": "{\n    \"page\": 0,\n    \"page_size\": 100,\n    \"filter\": {\n        \"states\": [\n            \"closed\"\n        ],\n        \"pr_closed_at\": {\n            \"$gt\": \"${1.config.start_ts}\",\n            \"$lt\": \"${1.config.end_ts}\"\n        },\n        \"integration_ids\": [\n            \"229\",\n            \"231\"\n        ],\n        \"creators\": [],\n        \"code_change_size_unit\": \"lines\",\n        \"code_change_size_config\": {\n            \"small\": \"50\",\n            \"medium\": \"150\"\n        },\n        \"comment_density_size_config\": {\n            \"shallow\": \"1\",\n            \"good\": \"5\"\n        }\n    },\n    \"across\": \"creator\",\n    \"ou_ids\": [\n        \"${3.item.id}\"\n    ],\n    \"ou_exclusions\": [\n        \"creators\"\n    ],\n    \"widget_id\": \"4e08b2d1-a766-4aee-bcf7-98ec974372fd\"\n}",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Body",
                        "index": 50
                    }
                },
                "output": {
                    "body": {
                        "key": "body",
                        "display_name": "body",
                        "hidden": false
                    },
                    "code": {
                        "key": "code",
                        "display_name": "code",
                        "hidden": false
                    },
                    "json_body": {
                        "key": "json_body",
                        "display_name": "json_body",
                        "value_type": "json_blob",
                        "hidden": false
                    }
                },
                "options": [],
                "position": {
                    "x": 306,
                    "y": 668
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Get SCM PRs List",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "10": {
                "id": "10",
                "type": "levelops_query",
                "description": "Make a call to a Levelops Query",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "ignore_errors": {
                        "key": "ignore_errors",
                        "type": "radio-group",
                        "values": [
                            {
                                "value": "Yes",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [
                            "Yes",
                            "No"
                        ],
                        "default_value": "Yes",
                        "display_name": "Ignore errors",
                        "description": "If Yes, this node will succeed regardless of the API response",
                        "index": 80
                    },
                    "headers": {
                        "key": "headers",
                        "type": "kv",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Headers",
                        "index": 30
                    },
                    "path": {
                        "key": "path",
                        "type": "text",
                        "values": [
                            {
                                "value": "v1/tags/list",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Path",
                        "description": "Path appended to the base URL",
                        "index": 20
                    },
                    "password": {
                        "key": "password",
                        "type": "password_string",
                        "values": [],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Api Key",
                        "description": "Api key for Authentication to reach Levelops Query.",
                        "index": 70
                    },
                    "integration_id": {
                        "key": "integration_id",
                        "type": "single-dynamic-select",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "dynamic_resource_name": "integrations",
                        "display_name": "Satellite Integration",
                        "description": "Pick a satellite integration to make the call from. If not specified, LevelOps will only be able to reach public APIs.",
                        "index": 60
                    },
                    "content_type": {
                        "key": "content_type",
                        "type": "text",
                        "values": [
                            {
                                "value": "application/json",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Content Type",
                        "description": "Content type of the body (for example: \"application/json\")",
                        "index": 40
                    },
                    "method": {
                        "key": "method",
                        "type": "single-select",
                        "values": [
                            {
                                "value": "POST",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE"
                        ],
                        "default_value": "GET",
                        "display_name": "Method",
                        "index": 10
                    },
                    "body": {
                        "key": "body",
                        "type": "text-area",
                        "values": [
                            {
                                "value": "{\"filter\":{\"tag_ids\": ${3.item.tags} }}",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Body",
                        "index": 50
                    }
                },
                "output": {
                    "body": {
                        "key": "body",
                        "display_name": "body",
                        "hidden": false
                    },
                    "code": {
                        "key": "code",
                        "display_name": "code",
                        "hidden": false
                    },
                    "json_body": {
                        "key": "json_body",
                        "display_name": "json_body",
                        "value_type": "json_blob",
                        "hidden": false
                    }
                },
                "options": [],
                "position": {
                    "x": 306,
                    "y": 808
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Get Tags",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "11": {
                "id": "11",
                "type": "script",
                "description": "Custom logic using JavaScript",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "parameters": {
                        "key": "parameters",
                        "type": "kv",
                        "values": [
                            {
                                "value": {
                                    "key": "issues_resolved",
                                    "value": "${4.json_body.records}"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "prs_closed",
                                    "value": "${6.json_body.records}"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "config",
                                    "value": "${1.config}"
                                },
                                "type": "json"
                            },
                            {
                                "value": {
                                    "key": "coding_days",
                                    "value": "${13.json_body.records}"
                                },
                                "type": "json"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Input Parameters",
                        "description": "Specify input parameters that will be available within the script.",
                        "index": 10
                    },
                    "script": {
                        "key": "script",
                        "type": "text-editor",
                        "values": [
                            {
                                "value": "function handleNode(context) {\n  var issues_resolved = JSON.parse(context.getParam(\"issues_resolved\"));\n  var prs_closed = JSON.parse(context.getParam(\"prs_closed\"));\n  var coding_days = JSON.parse(context.getParam(\"coding_days\"));\n  var config = JSON.parse(context.getParam(\"config\"));\n\n  var html_message = \"\";\n  var addTableRow = function (vals, isHeader = false) {\n    var rowHtml = '<tr>';\n    vals.forEach(val => {\n      rowHtml += (isHeader ? '<th>' : '<td>') + val + (isHeader ? '</th>' : '</td>');\n    });\n    rowHtml += '</tr>';\n    html_message += rowHtml;\n  };\n\n  var prs_merged = prs_closed.reduce(function(count, pr){\n    if(pr.pr_merged_at) {\n      count+=1;\n    }\n    return count;\n  }, 0);\n\n  var stories_resolved = issues_resolved.reduce(function(total, story) {\n    if(story.status && config.jira_done_statuses.includes(story.status) && config.jira_story_type.includes(story.issue_type)) {\n      total+=1;\n    }\n    return total;\n  }, 0);\n\n  var story_points_resolved = issues_resolved.reduce(function(total, story) {\n    if(story.status && config.jira_done_statuses.includes(story.status) && config.jira_story_type.includes(story.issue_type)) {\n      if(config.story_point_custom_field.length > 0) {\n        total += parseInt(story.custom_fields.story_point_custom_field);\n      } else {\n        total += parseInt(story.story_points);\n      }\n    }\n    return total;\n  }, 0);\n\n  var bugs_resolved = issues_resolved.reduce(function(total, bug) {\n    if(bug.status && config.jira_done_statuses.includes(bug.status) && config.jira_bug_type.includes(bug.issue_type)) {\n      total+=1;\n    }\n    return total;\n  }, 0);\n\n  var assignee_map = {};\n  issues_resolved.forEach(function(issue){\n    var flag = false; // this is to make sure multiple assignments are considered only once.\n    if(!assignee_map[issue.assignee]) {\n      assignee_map[issue.assignee] = {\n        \"story\": 0,\n        \"bugs\": 0,\n        \"tasks\": 0,\n        \"sp\": 0,\n        \"items_touched\": 0\n      };\n    }\n    if(config.jira_story_type.includes(issue.issue_type) && config.jira_done_statuses.includes(issue.status)) {\n      assignee_map[issue.assignee].story += 1;\n      flag = true;\n    } else if(config.jira_bug_type.includes(issue.issue_type) && config.jira_done_statuses.includes(issue.status)) {\n      assignee_map[issue.assignee].bugs += 1;\n      flag = true;\n    } else if(config.jira_task_type.includes(issue.issue_type) && config.jira_done_statuses.includes(issue.status)) {\n      assignee_map[issue.assignee].tasks += 1;\n      flag = true;\n    }\n    if(flag) {\n      if(config.story_point_custom_field.length > 0) {\n        assignee_map[issue.assignee].sp += parseInt(issue.custom_fields.story_point_custom_field);\n      } else {\n        assignee_map[issue.assignee].sp += parseInt(issue.story_points);\n      }\n    }\n  });\n\n  // items touched, worked upon at least once\n  issues_resolved.forEach(function(issue){\n    var assigned_once = [];\n    issue.assignee_list.forEach(function(entry) {\n      if(!assignee_map[entry.assignee]){\n        assignee_map[entry.assignee] = {\n          \"story\": 0,\n          \"bugs\": 0,\n          \"tasks\": 0,\n          \"sp\": 0,\n          \"items_touched\": 0\n        };\n      }\n      if(!assigned_once.includes(entry.assignee)) {\n        assignee_map[entry.assignee].items_touched += 1;\n      }\n      assigned_once.push(entry.assignee);\n    });\n  });\n\n  // sort by jira items touched\n  var assignee_map_keys = Object.keys(assignee_map);\n  assignee_map_keys.sort(function(a,b) {\n    return assignee_map[b].items_touched - assignee_map[a].items_touched;\n  });\n\n  var pr_creator_map = {};\n  prs_closed.forEach(function(pr){\n    if(!pr_creator_map[pr.creator]) {\n      pr_creator_map[pr.creator] = {\n        \"prs_created\": 0,\n        \"prs_reviewed\": 0,\n        \"coding_days\": 0\n      };\n    }\n    pr_creator_map[pr.creator].prs_created +=1;\n\n    pr.reviewers.forEach(function(reviewer) {\n      if(!pr_creator_map[reviewer]) {\n        pr_creator_map[reviewer] = {\n          \"prs_created\": 0,\n          \"prs_reviewed\": 0,\n          \"coding_days\": 0\n        };\n      }\n      pr_creator_map[reviewer].prs_reviewed +=1;\n    });\n  });\n\n  var coding_days_map = {};\n  coding_days.forEach(function(entry){\n    coding_days_map[entry.additional_key] = entry;\n  });\n\n  if(Object.keys(pr_creator_map).length > 0) {\n    Object.keys(coding_days_map).forEach(function(key) {\n      if(pr_creator_map[key]) {\n        pr_creator_map[key].coding_days = coding_days_map[key].mean;\n      } else {\n        pr_creator_map[key] = {\n          \"prs_created\": 0,\n          \"prs_reviewed\": 0,\n          \"coding_days\": coding_days_map[key].mean\n        };\n      }\n    });\n  }\n\n  // sort by PRs created\n  var pr_creator_keys = Object.keys(pr_creator_map);\n  pr_creator_keys.sort(function(a,b) {\n    return pr_creator_map[b].prs_created - pr_creator_map[a].prs_created;\n  });\n\n  /////////\n  html_message += \"<h4>Team Activity Report</h4>\";\n  html_message += \"<h5>\"+ new Date(parseInt(config.start_ts)*1000).toLocaleDateString() +\"  to  \" + new Date(parseInt(config.end_ts)*1000).toLocaleDateString() +\"</h5>\";\n  html_message += '<table border=1 cellpadding=5 style=\"border-collapse: collapse; \">';\n  addTableRow([\"PRs Merged\", \"Stories Resolved\", \"Bugs Resolved\", \"Story points completed\"], true);\n  addTableRow([prs_merged, stories_resolved, bugs_resolved, story_points_resolved]);\n  html_message += \"</table>\";\n\n  /////////\n  html_message += \"<h4>Jira Activity Report</h4>\";\n  html_message += '<table border=1 cellpadding=5 style=\"border-collapse: collapse; \">';\n  addTableRow([\"Assignee\", \"Stories\", \"Bugs\", \"Tasks\", \"Story Points\", \"Items Assigned at some point\"], true);\n\n  assignee_map_keys.forEach(function(key){\n    addTableRow([key, assignee_map[key].story, assignee_map[key].bugs, assignee_map[key].tasks, assignee_map[key].sp, assignee_map[key].items_touched]);\n  });\n  html_message += \"</table>\"; \n\n  /////////\n  if(pr_creator_keys.length > 0) {\n    html_message += \"<h4>Pull (Merge) Requests Activity Report</h4>\";\n    html_message += '<table border=1 cellpadding=5 style=\"border-collapse: collapse; \">';\n    addTableRow([\"Contributor\", \"PRs Created\", \"PRs Reviewed\", \"Coding Days\"], true);\n\n    pr_creator_keys.forEach(function(key){\n      addTableRow([key, pr_creator_map[key].prs_created, pr_creator_map[key].prs_reviewed, pr_creator_map[key].coding_days]);\n    });\n\n    html_message += \"</table>\"; \n  }\n\n\n  return { \n    state : 'success',\n    output : { \n      'message' : html_message\n      //      assignee_map: JSON.stringify(assignee_map)\n    } \n  };\n}",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "default_value": "prefix = 'hello ';\nfunction handleNode(context) {\n  name = context.getParam('name');\n  // levelops.serviceName().doSomething() - invoke a levelops service\n  return { \n    state : 'success',\n    output : { \n      'message' : prefix + name  \n    } \n  };\n}",
                        "display_name": "Script",
                        "description": "Write some custom logic using JavaScript.",
                        "index": 20
                    }
                },
                "output": {},
                "options": [],
                "position": {
                    "x": 307,
                    "y": 1089
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Report",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "12": {
                "id": "12",
                "type": "email_notification",
                "description": "Send an Email to a user",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "user_email": {
                        "key": "user_email",
                        "type": "multi-custom-dynamic-select",
                        "values": [],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "dynamic_resource_name": "users",
                        "search_field": "email",
                        "display_name": "User Emails",
                        "description": "Emails of the recipients. Select from the list, or use a variable (it may contain one or more emails, separated by commas).",
                        "index": 10
                    },
                    "subject": {
                        "key": "subject",
                        "type": "text",
                        "values": [
                            {
                                "value": "Team Activity Report",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Subject",
                        "index": 20
                    },
                    "text": {
                        "key": "text",
                        "type": "text-area",
                        "values": [
                            {
                                "value": "${11.message}",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "text",
                        "description": "Text message to send",
                        "index": 30
                    }
                },
                "output": {},
                "options": [],
                "position": {
                    "x": 303,
                    "y": 1249
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Send Email notification",
                "size": {
                    "width": 320,
                    "height": 124
                }
            },
            "13": {
                "id": "13",
                "type": "levelops_query",
                "description": "Make a call to a Levelops Query",
                "ports": {
                    "input": {
                        "id": "input",
                        "type": "input",
                        "properties": {
                            "action": "input"
                        },
                        "position": {
                            "x": 131,
                            "y": 0
                        }
                    },
                    "output": {
                        "id": "output",
                        "type": "output",
                        "properties": {
                            "action": "output"
                        },
                        "position": {
                            "x": 131,
                            "y": 78
                        }
                    }
                },
                "input": {
                    "ignore_errors": {
                        "key": "ignore_errors",
                        "type": "radio-group",
                        "values": [
                            {
                                "value": "Yes",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [
                            "Yes",
                            "No"
                        ],
                        "default_value": "Yes",
                        "display_name": "Ignore errors",
                        "description": "If Yes, this node will succeed regardless of the API response",
                        "index": 80
                    },
                    "headers": {
                        "key": "headers",
                        "type": "kv",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Headers",
                        "index": 30
                    },
                    "path": {
                        "key": "path",
                        "type": "text",
                        "values": [
                            {
                                "value": "v1/scm/commits/coding_days_report",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Path",
                        "description": "Path appended to the base URL",
                        "index": 20
                    },
                    "password": {
                        "key": "password",
                        "type": "password_string",
                        "values": [],
                        "required": true,
                        "hidden": false,
                        "options": [],
                        "display_name": "Api Key",
                        "description": "Api key for Authentication to reach Levelops Query.",
                        "index": 70
                    },
                    "integration_id": {
                        "key": "integration_id",
                        "type": "single-dynamic-select",
                        "values": [],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "dynamic_resource_name": "integrations",
                        "display_name": "Satellite Integration",
                        "description": "Pick a satellite integration to make the call from. If not specified, LevelOps will only be able to reach public APIs.",
                        "index": 60
                    },
                    "content_type": {
                        "key": "content_type",
                        "type": "text",
                        "values": [
                            {
                                "value": "application/json",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Content Type",
                        "description": "Content type of the body (for example: \"application/json\")",
                        "index": 40
                    },
                    "method": {
                        "key": "method",
                        "type": "single-select",
                        "values": [
                            {
                                "value": "POST",
                                "type": "string"
                            }
                        ],
                        "required": true,
                        "hidden": false,
                        "options": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE"
                        ],
                        "default_value": "GET",
                        "display_name": "Method",
                        "index": 10
                    },
                    "body": {
                        "key": "body",
                        "type": "text-area",
                        "values": [
                            {
                                "value": "{\n    \"filter\": {\n        \"committed_at\": {\n            \"$gt\": \"${1.config.start_ts}\",\n            \"$lt\": \"${1.config.end_ts}\"\n        },\n        \"sort_xaxis\": \"value_high-low\",\n        \"integration_ids\": ${1.config.integration_ids}\n    },\n    \"across\": \"committer\",\n    \"sort\": [\n        {\n            \"id\": \"commit_days\",\n            \"desc\": true\n        }\n    ],\n    \"interval\": \"week\",\n    \"ou_ids\": [\n        \"${3.item.id}\"\n    ],\n    \"widget_id\": \"7f1fa150-866d-11ed-994a-0f7e0d408ae7\"\n}",
                                "type": "string"
                            }
                        ],
                        "required": false,
                        "hidden": false,
                        "options": [],
                        "display_name": "Body",
                        "index": 50
                    }
                },
                "output": {
                    "body": {
                        "key": "body",
                        "display_name": "body",
                        "hidden": false
                    },
                    "code": {
                        "key": "code",
                        "display_name": "code",
                        "hidden": false
                    },
                    "json_body": {
                        "key": "json_body",
                        "display_name": "json_body",
                        "value_type": "json_blob",
                        "hidden": false
                    }
                },
                "options": [],
                "position": {
                    "x": 300,
                    "y": 952
                },
                "properties": {
                    "icon": "levelops"
                },
                "name": "Coding Days",
                "size": {
                    "width": 320,
                    "height": 124
                }
            }
        },
        "links": {
            "0a05b695-d8fb-41e2-a207-d5a960a6ac1b": {
                "id": "0a05b695-d8fb-41e2-a207-d5a960a6ac1b",
                "from": {
                    "nodeId": "0",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "1",
                    "portId": "input"
                },
                "properties": {}
            },
            "5bd30a13-2d66-4189-8a92-045298ed8302": {
                "id": "5bd30a13-2d66-4189-8a92-045298ed8302",
                "from": {
                    "nodeId": "1",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "2",
                    "portId": "input"
                },
                "properties": {}
            },
            "d54f771d-3281-4686-a8c1-fd53087f28ff": {
                "id": "d54f771d-3281-4686-a8c1-fd53087f28ff",
                "from": {
                    "nodeId": "6",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "10",
                    "portId": "input"
                },
                "properties": {}
            },
            "dc179f8d-6fbc-4322-bb95-1392c3f47f10": {
                "id": "dc179f8d-6fbc-4322-bb95-1392c3f47f10",
                "from": {
                    "nodeId": "3",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "4",
                    "portId": "input"
                },
                "properties": {}
            },
            "9b3a0baf-3f64-42ff-81db-b871c6096bb8": {
                "id": "9b3a0baf-3f64-42ff-81db-b871c6096bb8",
                "from": {
                    "nodeId": "4",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "6",
                    "portId": "input"
                },
                "properties": {}
            },
            "42b1552d-b831-4dc2-9c04-b5f8fdf2fefa": {
                "id": "42b1552d-b831-4dc2-9c04-b5f8fdf2fefa",
                "from": {
                    "nodeId": "10",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "13",
                    "portId": "input"
                },
                "properties": {}
            },
            "ff209154-3e04-45d8-b518-eea90330ec3b": {
                "id": "ff209154-3e04-45d8-b518-eea90330ec3b",
                "from": {
                    "nodeId": "2",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "3",
                    "portId": "input"
                },
                "properties": {}
            },
            "558826e2-9345-435d-82c4-774ff4e77cda": {
                "id": "558826e2-9345-435d-82c4-774ff4e77cda",
                "from": {
                    "nodeId": "11",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "12",
                    "portId": "input"
                },
                "properties": {}
            },
            "2abc5f67-518e-4dc8-8bb2-a1d075b59ab6": {
                "id": "2abc5f67-518e-4dc8-8bb2-a1d075b59ab6",
                "from": {
                    "nodeId": "13",
                    "portId": "output"
                },
                "to": {
                    "nodeId": "11",
                    "portId": "input"
                },
                "properties": {}
            }
        }
    }
}
